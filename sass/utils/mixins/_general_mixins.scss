/// Mixin robotoTypo : sert à définir le style désiré de la font roboto
/// @param {string} $styleName 
@mixin robotoTypo($style) {

    @if not (isInList($RobotoFontStyles, $style)) {
        @error "Le style \"#{$style}\" de la police Roboto ne fait pas partie de la liste connue : #{$style}";
    } 

    font-family : 'Roboto-#{$style}', Arial, Helvetica, sans-serif;
}

/// Mixin typography : sert à définir la font désirée
/// @param {string} $fontName 
@mixin typography($fontName) {
    $fontNames : ("Shrikhand", "heart");

    @if not (isInList($fontNames, $fontName)) {
        @error "La font \"#{$fontName}\" ne fait pas partie des font connue : #{$fontNames}";
    }

    font-family : $fontName, Arial, Helvetica, sans-serif;
}

/// Mixin  setBoxShadow : Définir un box-shadow generique
/// @param {Color} $color 
@mixin setBoxShadow ($color : rgba(0,0,0,0.3)) {
    box-shadow: 0 3px 10px -3px $color;
}

/// Mixin  box-shadow-6-layer : Sert à définir un box-shadow de 6 layer
/// @param {List of number} $alpha 
@mixin box-shadow-6-layer( $alpha : (0.014, 0.035, 0.059, 0.084, 0.109, 0.13) ) {
    box-shadow:
    0 10.3px 17.4px -23px   rgba(0, 0, 0, nth($alpha, 1)),
    0 15.8px 22.7px -23px   rgba(0, 0, 0, nth($alpha, 2)),
    0 19.3px 24.7px -23px   rgba(0, 0, 0, nth($alpha, 3)),
    0 21.7px 26.4px -23px   rgba(0, 0, 0, nth($alpha, 4)),
    0 23.4px 31.4px -23px   rgba(0, 0, 0, nth($alpha, 5)),
    0 27px 67px -23px       rgba(0, 0, 0, nth($alpha, 6));
}

/// Mixin  setSize : Sert à définir `width` et `height` simultanément.
/// @param {Length} $width 
/// @param {Length} $height
@mixin setSize($width : auto, $height : auto){
    width : $width;
    height : $height;
}


/// Mixin  setSize : Définie les règles pour que flex soit set à center sur l'axe principal, idem sur le secondaire
/// @param {bool} $isImportant 
@mixin setFlexCenterCenter($isImportant : false) {
    $importantTag : '';
    @if($isImportant){ $importantTag : '!important'; }

    display : flex #{$importantTag};
    justify-content: center;
    align-items: center;
}

/// Mixin  objectFitCoverCenterCenter : Définie les règles pour qu'une image remplisse entièrement le cadre souhaité 
/// @param {length} $height 
/// @param {length} $width 
@mixin objectFitCoverCenterCenter ($height, $width : 100%) {
    height: $height;
    width: $width;
    object-fit: cover;
    object-position: center center;
}

/// Mixin  setEllipsis : Définie les règles pour que le texte ne passe pas à la ligne et soit tronqué en cas de débordement
@mixin setEllipsis{
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}


/// Mixin setRobotoFonts : Défini les @font-face roboto
@mixin setRobotoFonts {
    @each $style in $RobotoFontStyles {
        @font-face {
            font-family: "Roboto-#{$style}";
            src: url("../fonts/Roboto/Roboto-#{$style}.ttf") format('truetype');
        }
    }
}

/// Mixin addFadeInDelayModifier : Défini l'animation fadeIn avec décalage
/// @param {number} $howMay
/// @param {length} $time
/// @param {length} $delay
@mixin addFadeInDelayModifier($howMany : 1, $time : 0.5s, $delay : 0.15s) {

    @for $i from 1 to ($howMany+1) {
        &--fadeIn-dl-#{$i} {
            animation : fadeIn $time ease-in-out #{ $delay * ($i - 1) }  backwards ;
        }
    }

}

/// Mixin setMediaScreen : Défini la média screen désirée
/// @param {string} $screen
@mixin setMediaScreen($screen) {
    @media screen and (min-width : map-get($min-breakpoints, $screen)) {
        @content;
    }
}



